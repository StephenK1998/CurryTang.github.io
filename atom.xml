<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhi kai&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.chenzhikai.com/"/>
  <updated>2017-01-25T13:59:04.544Z</updated>
  <id>http://www.chenzhikai.com/</id>
  
  <author>
    <name>CZK</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.chenzhikai.com/posts/uncategorized/2017-01-25-Python%20Tips%20every%20day(Fluent%20Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0).html"/>
    <id>http://www.chenzhikai.com/posts/uncategorized/2017-01-25-Python Tips every day(Fluent Python学习笔记).html</id>
    <published>2017-01-25T13:56:18.015Z</published>
    <updated>2017-01-25T13:59:04.544Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="title-Fluent-Python-Note-Tip1-字典（上）"><a href="#title-Fluent-Python-Note-Tip1-字典（上）" class="headerlink" title="title:Fluent Python Note Tip1:字典（上）"></a>title:Fluent Python Note Tip1:字典（上）</h2><p>#Python Tips every day(Fluent Python学习笔记)</p>
<p>##Tip1:字典（上）</p>
<p>字典可以说是Python中最常用的数据结构之一，但它也有一些不那么为人所知的奇技淫巧，掌握它们，有助于Python程序员写出更优雅、更Pythonic的代码。</p>
<p>###<em>1.Python中映射类的继承关系</em></p>
<p>Python中的映射类从Container, Iterable, Sized三个接口继承而来，最基本的映射类为Mapping类(Abstract Class)，它实现了__getitem__ , get, keys, items等方法， 再接下来派生出了MutableMapping类，我们常用的dict便隶属于此。</p>
<pre>
<code>
In [29]: Mapping.__dict__.keys()
Out[29]: dict_keys(['_abc_registry', 'get', '__doc__', '__getitem__', '_abc_negative_cache_version', '__contains__', '__module__', '__abstractmethods__', '__slots__', '_abc_cache', '_abc_negative_cache', 'items', 'values', '__eq__', '__hash__', 'keys'])

In [30]: [method for method in MutableMapping.__dict__.keys() if method not in Mapping.__dict__.keys()]
Out[30]:
['update',
 'pop',
 '_MutableMapping__marker',
 '__setitem__',
 '__delitem__',
 'setdefault',
 'popitem',
 'clear']

</code>
</pre>

<p>###<em>2.字典的键</em></p>
<p>什么样的值都能当作字典的键吗？Absolutely Not. Python规定Hashable Objects必须实现__hash__与__eq__这两个通用接口。简单的来说，必须是运行时不可变的值。废话少说，来看几个例子。</p>
<pre>
In [31]: my_dict = {}

In [32]: key1 = [1] #不可以，list unhashable

In [33]: key2 = (1,) #可以

In [34]: key3 = (1,[1,2]) #不可以，元组只要在元素都hashable时才可以做键

In [35]: key4 = (1,(1,2)) #可以

In [36]: key5 = 'abcs' #可以

In [37]: key6 = set(3,4) #不可以，set unhashable, frozenset可以用作键

</pre>

<p>一句话来总结一下，“All of Python’s immutable built-in objects are hashable”  (Cited from Python Glossary)</p>
<p>###3. 构造字典（创建一个字典的n种方法）</p>
<p>####1. 重载的构造函数dict()</p>
<pre>
In [43]: dict1 = dict(a = 1, b = 2)

In [44]: dict2 = {'a':1, 'b':2}

In [45]: dict3 = dict(zip(['a','b'],[1,2])) [1]

In [46]: dict4 = dict([('a',1),('b',2)])

In [47]: dict5 = dict({'a':1, 'b':2})

In [48]: dict1 == dict2 == dict3 == dict4 == dict5
Out[48]: True


</pre>

<p>Notes:[1]Find more information about zip(): <a href="https://docs.python.org/3.3/library/functions.html#zip" target="_blank" rel="external">zip</a></p>
<p>####2. 使用dict comprehension<br>类似于List Comprehesion, 字典推导式提供了一种优雅、简洁的方式来创建一个Python字典。</p>
<p>字典推导式的语法在Python2.7 以及 3 以后是这样的</p>
<pre>d = {k:v for k, v in iterable}</pre>

<p>需要注意的是之前</p>
<p><pre>d = {(k,v) for k, v in iterable}</pre><br>的写法已不再适用。</p>
<p>下面给出一些简单的样例<br><code><br>In [1]: three_point_shooting = [<br>   …: (‘curry’,99),<br>   …: (‘thompson’,98),<br>   …: (‘durant’,90),<br>   …: (‘james’,70)]<br>In [2]: three_point_map = {player_name:ability for player_name, ability in three_point_shooting}<br>In [3]: three_point_map<br>Out[3]: {‘curry’: 99, ‘durant’: 90, ‘james’: 70, ‘thompson’: 98}<br>In [4]: {player.upper():ability for player, ability in three_point_map.items()}<br>Out[4]: {‘CURRY’: 99, ‘DURANT’: 90, ‘JAMES’: 70, ‘THOMPSON’: 98}<br></code></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;title-Fluent-Python-Note-Tip1-字典（上）&quot;&gt;&lt;a href=&quot;#title-Fluent-Python-Note-Tip1-字典（上）&quot; class=&quot;headerlink&quot; title=&quot;title:Fluent Pyth
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Test post</title>
    <link href="http://www.chenzhikai.com/posts/uncategorized/2017-01-03-Test-post.html"/>
    <id>http://www.chenzhikai.com/posts/uncategorized/2017-01-03-Test-post.html</id>
    <published>2017-01-03T15:11:04.000Z</published>
    <updated>2017-01-03T15:11:04.529Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.chenzhikai.com/posts/uncategorized/2016-12-30-hello-world.html"/>
    <id>http://www.chenzhikai.com/posts/uncategorized/2016-12-30-hello-world.html</id>
    <published>2016-12-30T06:16:25.912Z</published>
    <updated>2016-12-30T06:16:25.912Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
